#!/bin/bash

# Redprine
#
# Downloads and caches GitHub PRs. Update the associated Redmine issue of any
# new PRs authored by the owner.

VERSION='0.0.1'

GITHUB_TOKEN=''
GITHUB_USERNAME=''
GITHUB_OWNER_REPO=''

REDMINE_BASE_URL=''
REDMINE_TOKEN=''
REDMINE_JSON_PARAMS=''

XDG_DATA_HOME=${XDG_DATA_HOME:-"${HOME}/.local/share"}
REDPRINE_DATA_DIR=${REDPRINE_DATA_DIR:-"${XDG_DATA_HOME}/redprine"}
CACHE_FILE="${REDPRINE_DATA_DIR}/${GITHUB_OWNER_REPO/\//--}.json"

CACHE_ONLY=0


function print_usage () {
	cat 1>&2 <<__EOF__
Usage: redprine --github-token TOKEN --github-username USERNAME --github-owner-repo OWNER_REPO --redmine-base-url URL --redmine-token TOKEN --redmine-json-params EXEC

Flags:
      --github-token=TOKEN            GitHub API token with pull request access.
      --github-username=USERNAME      GitHub username.
      --github-owner-repo=OWNER_REPO  The owner and repo get pull requests for
                                      (e.g. 'org_or_username/my-repo').
      --redmine-base-url=URL          Base Redmine URL
                                      (e.g. 'https://redmine.eaglejump.co').
      --redmine-token=TOKEN           Redmine account API key
      --redmine-json-params=EXEC      Bash-executable string that outputs JSON
                                      as a parameter for updating issues.
                                      Argument '\$0' is the pull request URL.
      --cache-only                    Tells the program not to make update
                                      requests to Redmine, just save PRs to
                                      cache.
  -h, --help                          Show this help.
  -v, --version                       Show application version.
__EOF__
}

# Get a list of open pull requests from the GitHub API.
function fetch_pull_requests () {
	local pull_requests=$(curl \
		--silent \
		--header 'Accept:application/vnd.github.v3+json' \
		--header "Authorization: Bearer ${GITHUB_TOKEN}" \
		--location "https://api.github.com/repos/${GITHUB_OWNER_REPO}/pulls")

	echo "$pull_requests"
}

# Stores pull requests to the cache file.
function cache_my_pull_requests () {
	local pull_requests="$1"

	local my_pull_requests=$(extract_data_from_pull_request_json "$pull_requests")

	echo "$my_pull_requests" > "$CACHE_FILE"
}

# Fetches the latest pull requests from GitHub and gets a list of those that
# aren't in our cache file.
function new_pull_requests () {
	local pull_requests=$(fetch_pull_requests)

	local my_prs=$(extract_data_from_pull_request_json "$pull_requests")

	local new=$(jq "${my_prs} - ." "$CACHE_FILE")

	echo "$new"
}

# Filters JSON pull requests from the GitHub API including only those for the
# requested username. The result is a JSON array of hashes containing only a
# few relevant pull request fields.
function extract_data_from_pull_request_json () {
	local pull_requests="$1"

	printf "%s\n" "$pull_requests" |
		jq --compact-output '. |
			map({
				html_url,
				number,
				user: .user.login,
				ref: .head.ref,
				created_at
			}) |
			map(
				select(.user == "'"$GITHUB_USERNAME"'")
			)'
}

# Produces a tab-separated branch name and pull request URL from our pull
# request JSON.
function branch_and_pull_request_url () {
	local pull_request="$1"

	printf "%s\n" "$pull_request" |
		jq --raw-output '[.ref, .html_url] | @tsv'
}

# Turns a tab-separated branch name and pull request URL into a tab-separated
# Redmine issue number and pull request URL. Gets the issue number as a
# four-digit prefix of the branch name.
function issue_number_and_pull_request_url () {
	local pull_request="$1"

	local branch_and_url=$(branch_and_pull_request_url "$pull_request")

	echo "$branch_and_url" |
		perl -ne '/^(\d{4})-[^\t]*\t(.*)/ && print "$1\t$2\n"'
}

# Takes a JSON array of Redprine pull request hashes and outputs one hash per
# line so the hashes can be iterated over in a shell loop.
function each_pull_request () {
	local pull_requests="$1"

	printf "%s\n" "$pull_requests" |
		jq --compact-output '. | .[]'
}

# Updates fields for each given issue.
function update_redmine_statuses () {
	local pull_requests="$1"

	for pull_request in $(each_pull_request "$pull_requests"); do
		update_redmine_status "$pull_request"
	done
}

# Given a tab-separated Redmine issue number and GitHub pull request URL, will
# update fields on the given issue.
function update_redmine_status () {
	local pull_request="$1"

	local issue_pr=$(issue_number_and_pull_request_url "$pull_request")

	local issue_id=$(
		echo "$issue_pr" |
		cut -d '	' -f 1 -
	)

	local pull_request_link=$(
		echo "$issue_pr" |
		cut -d '	' -f 2 -
	)

	local json=$(bash -c "$REDMINE_JSON_PARAMS" "$pull_request_link")

	local status_code=$(
		curl \
			--output /dev/null \
			--head \
			--write-out '%{http_code}' \
			--header 'Content-Type: application/json' \
			--header "X-Redmine-API-Key: $REDMINE_TOKEN" \
			--request PUT \
			--data "$json" \
			--location "${REDMINE_BASE_URL}/issues/${issue_id}.json"
	)

	if [ "$status_code" != '200' ]; then
		exit_with_error "Redmine API error, status code $status_code"
	fi

	update_cache_with_new_pull "$pull_request"
}

# Updates the cache file, appending a new pull request in our JSON format.
function update_cache_with_new_pull () {
	local pull_request="$1"

	jq "[$pull_request] + ." "$CACHE_FILE" > "${CACHE_FILE}.new"
	mv "${CACHE_FILE}.new" "$CACHE_FILE"
}

function main () {
	if [ "$CACHE_ONLY" -eq 1 ]; then
		cache_my_pull_requests "$(fetch_pull_requests)"

		exit
	fi

	local pr_json=$(new_pull_requests)

	update_redmine_statuses "$pr_json"
	update_cache_with_new_pulls "$pr_json"
}


function exit_with_error () {
	local message="$1"

	echo "redprine: error: $message" 1>&2

	exit 1
}

function preflight () {
	mkdir -p "$REDPRINE_DATA_DIR"

	if [ ! -f "$CACHE_FILE" ]; then
		echo '[]' > "$CACHE_FILE"
	fi
}

function argument_error () {
	local flag="$1"

	exit_with_error "Required argument '$flag' not provided, try --help"
}

function check_required_argument () {
	local flag="$1"
	local variable="$2"

	if [ -z "$variable" ]; then
		argument_error "$flag"
	fi
}

function parse_arguments () {
	while [ $# -gt 0 ]; do
		case "$1" in
		--github-token)
			GITHUB_TOKEN="$2"

			shift 2
			continue
			;;
		--github-token=*)
			GITHUB_TOKEN="${1##--github-token=}"

			shift
			continue
			;;
		--github-username)
			GITHUB_USERNAME="$2"

			shift 2
			continue
			;;
		--github-username=*)
			GITHUB_USERNAME="${1##--github-username=}"

			shift
			continue
			;;
		--github-owner-repo)
			GITHUB_OWNER_REPO="$2"

			shift 2
			continue
			;;
		--github-owner-repo=*)
			GITHUB_OWNER_REPO="${1##--github-owner-repo=}"

			shift
			continue
			;;
		--redmine-base-url)
			REDMINE_BASE_URL="$2"

			shift 2
			continue
			;;
		--redmine-base-url=*)
			REDMINE_BASE_URL="${1##--redmine-base-url=}"

			shift
			continue
			;;
		--redmine-token)
			REDMINE_TOKEN="$2"

			shift 2
			continue
			;;
		--redmine-token=*)
			REDMINE_TOKEN="${1##--redmine-token=}"

			shift
			continue
			;;
		--redmine-json-params)
			REDMINE_JSON_PARAMS="$2"

			shift 2
			continue
			;;
		--redmine-json-params=*)
			REDMINE_JSON_PARAMS="${1##--redmine-json-params=}"

			shift
			continue
			;;
		--cache-only)
			CACHE_ONLY=1

			shift
			continue
			;;
		-h | --help)
			print_usage

			exit 0
			;;
		-v | --version)
			echo $VERSION

			exit 0
			;;
		*)
			exit_with_error "Unrecognised argument '$1', try --help"
			;;
		esac
	done

	check_required_argument '--github-token' "$GITHUB_TOKEN"
	check_required_argument '--github-username' "$GITHUB_USERNAME"
	check_required_argument '--github-owner-repo' "$GITHUB_OWNER_REPO"
	check_required_argument '--redmine-base-url' "$REDMINE_BASE_URL"
	check_required_argument '--redmine-token' "$REDMINE_TOKEN"
	check_required_argument '--redmine-json-params' "$REDMINE_JSON_PARAMS"
}


preflight
parse_arguments "$@"
main
